{"title":"访问控制技术","uid":"8d37745125c6a8bb3305654c276ebe67","slug":"访问控制技术","date":"2022-10-31T02:17:00.000Z","updated":"2022-12-05T15:31:42.508Z","comments":true,"path":"api/articles/访问控制技术.json","keywords":null,"cover":"https://pic2.zhimg.com/v2-38269faf6a9edc1e6d6642c03fa8116b_r.jpg","content":"<h1 id=\"访问控制技术\"><a href=\"#访问控制技术\" class=\"headerlink\" title=\"访问控制技术\"></a>访问控制技术</h1><h2 id=\"1、主体、客体和访问授权\"><a href=\"#1、主体、客体和访问授权\" class=\"headerlink\" title=\"1、主体、客体和访问授权\"></a>1、主体、客体和访问授权</h2><p>主体：是一个主动的实体，它包括用户、用户组、终端、主机或一个应用，主体可以访问客体。</p>\n<p>客体：是一个被动的实体，对客体的访问要受控，它可以是一个字节、字段、记录、程序、文件，或者是一个处理器、存贮器、网络接点等。</p>\n<p>授权访问：指主体访问客体的允许，授权访问对每一对主体和客体来说是给定的。例如：授权访问有读写、执行，读写客体是直接进行的，而执行是搜索文件、执行文件。对用户的访问授权是由系统的安全策略决定的。</p>\n<p>在一个访问控制系统中，区别主体和客体很重要。首先由主体发起访问客体的操作，该操作根据系统的授权或被允许或被拒绝。另外，主体与客体的关系是相对的，当一个主体受到另一个主体的访问， 成为访问目标时，该主体便成为了客体。</p>\n<h2 id=\"2、访问控制策略\"><a href=\"#2、访问控制策略\" class=\"headerlink\" title=\"2、访问控制策略\"></a>2、访问控制策略</h2><p>访问控制通常有三种策略：</p>\n<p>自主访问控制（Discretionary Access Control）；</p>\n<p>强制访问控制（Mandatory  Access Control）；</p>\n<p>基于角色的访问控制（Role-Based  Access Control）。</p>\n<p>各种访问控制策略之间并不相互排斥，现存计算机系统中通常都是多种访问控制策略并存，系统管理员能够对安全策略进行配置使其达到安全政策的要求。</p>\n<ol>\n<li>自主访问控制（DAC）</li>\n</ol>\n<p>自主访问控制，又称为随意访问控制，根据用户的身份及允许访问权限决定其访问操作，只要用户身份被确认后，即可根据访问控制表上赋予该用户的权限进行限制性用户访问。使用这种控制方法，用户或应用可任意在系统中规定谁可以访问它们的资源，这样，用户或用户进程就可有选择的与其他用户共享资源。它是一种对单独用户执行访问控制的过程和措施。</p>\n<p>由于DAC对用户提供灵活和易行的数据访问方式，能够适用与许多的系统环境，所以DAC被大量采用、尤其在商业和工业环境的应用上。然而，DAC提供的安全保护容易被非法用户绕过而获得访问。例如，若用户A有权访问文件F，而用户B无权访问F，则一旦A获取F后在传送给B，则B也可访问F，其原因是在自由访问策略中，用户在获得文件的访问后，并没有限制对该文件信息的操作，即并没有控制数据信息的分发。所以DAC提供的安全性还相对较低，不能够对系统资源提供充分的保护，不能抵御特洛伊木马的攻击。</p>\n<ol start=\"2\">\n<li>强制访问控制（MAC）</li>\n</ol>\n<p>与DAC相比，强制访问控制提供的访问控制机制无法绕过。在强制访问控制中，每个用户及文件都被赋予一定的安全级别，用户不能改变自身或任何客体的安全级别，即不允许单个用户确定访问全新啊，只有系统管理员可以确定用户和组的访问权限。系统通过比较用户和访问的文件的安全级别来决定用户是否可以访问该文件。此外，强制访问控制不允许一个进程生成共享文件，从而防止进程通过共享文件将信息从一个进程传到另一个进程。MAC可以通过使用敏感标签对所有用户的资源强制执行安全策略，即实行强制访问控制。安全级别一般有四级：绝密级（Top Secret），秘密级（Secret），机密级（Confidential），无级别级（Unclassified）</p>\n<p>其级别为从高道题依次为：T&gt;S&gt;C&gt;U，系统根据主体和客体的敏感标记来巨鼎访问模式。通常情况下，访问模式包括：</p>\n<p>下读：用户界别大于文件级别的读操作；</p>\n<p>上写：用户界别集显奥宇文件级别的写操作；</p>\n<p>下写：用户级别大于文件级别的写操作；</p>\n<p>上读：用户界别小于文件级别的读操作。</p>\n<p>上述读写方式都保证了信息流的单向性，显然上读-下写方式保证了数据的完整性（integrity），上写-下读方式则保证了信息的秘密性。</p>\n<ol start=\"3\">\n<li>角色访问控制（RBAC）</li>\n</ol>\n<p>角色访问策略是根据用户在系统里表现的活动性质而定的，活动性质表明用户充当一定的角色，用户访问系统时，系统必须先检查用户的角色。一个用户可以充当多个角色、一个角色也可以由多个用户担任。角色访问策略具有一下有点：</p>\n<p>便于授权管理，如系统管理员需要修改系统设置等内容时，必须有几个不同角色的用户到场方能操作，从而保证了安全性；</p>\n<p>便于根据工作需要分级，如企业财务部门与非财务部门的员工对企业财务的访问权就可由财务人员这个角色来区分；</p>\n<p>便于赋予最小权限，如即使用户被赋予高级身份时也未必一定要使用，以便减少损失。只有必要时方能拥有权限；</p>\n<p>便于任务分担，不同的角色完成不同的任务；</p>\n<p>便于文件分级管理，文件本身也可分为不同的橘色，如信件、账单等，由不同角色的用户拥有。</p>\n<p>角色访问策略是一种有效而灵活的安全措施。通过定义模型各个部分，可以实现DAC和MAC所需要的控制策略，目前这方面的研究及应用还处于试验探索阶段。</p>\n<h2 id=\"3、访问控制机制\"><a href=\"#3、访问控制机制\" class=\"headerlink\" title=\"3、访问控制机制\"></a>3、访问控制机制</h2><p>访问控制机制是为检测和防止系统中的未经授权访问，对资源予以保护所采取的软硬件措施和一系列管理措施等。访问控制一般是在操作系统的控制下，按照事先确定的规则决定是否允许主体访问客体，它贯穿于系统工作的全过程，实在文件系统中广泛应用的安全防护方法。</p>\n<p>访问控制矩阵（Access Control Matrix）是最初实现访问控制机制的概念模型，它利用二维矩阵规定了任意主体和任意客体间的访问权限。中矩阵的行代表主体的访问权限属性，矩阵中的列代表课题的访问控制属性，矩阵中的每一格表示所在行的主体对所在列的客体的访问授权。访问控制的任务就是确保系统的操作是按照访问控制矩阵授权的访问来执行的，它是通过应用监控器协调客体对主体的每次访问而实现，这种方法清晰的实现认证与访问控制的相互分离。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>File1</th>\n<th>File2</th>\n<th>File3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>John</td>\n<td>Own R W</td>\n<td></td>\n<td>Own R W</td>\n</tr>\n<tr>\n<td>Alice</td>\n<td>R</td>\n<td>Own R W</td>\n<td>W</td>\n</tr>\n<tr>\n<td>Bob</td>\n<td>R W</td>\n<td>R</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>在较大的系统中，访问控制矩阵将变得非常巨大，而且矩阵中的许多格可能都为空，造成很大的存储空间浪费，因此在实际应用下，访问控制很少利用矩阵方式实现。有几种在实际应用中访问控制的几种常用方法：</p>\n<ol>\n<li>访问控制表（Access Control Lists，ACLs）</li>\n</ol>\n<p>访问控制表是以文件为中心建立访问权限表，表中登记了该文件的访问用户名及访问权隶属关系。利用访问控制表，能够很容易的判断出对于特定客体的授权访问，那些主题可以访问并有哪些访问权限。同样很容易撤销特定客体的授权访问，只要把该客体的访问控制表置为空。</p>\n<p>处于访问控制表的简单，使用，虽然在查询特定主体能够访问的客体时，炫耀遍历查询所有客体的访问控制表，它任然时一种成熟且有效的访问控制实现方法，许多通用的操作系统使用访问控制表来提供访问控制服务。</p>\n<ol start=\"2\">\n<li>能力关系表（Capabilities Lists）</li>\n</ol>\n<p>能力关系表与ACL相反，是以用户为中心建立访问权限表，表中规定了该用户可访问的文件名及访问权限。</p>\n<p>利用能力关系表可以很方便查询一个主体的所有授权访问。相反，检索具有授权访问特定客体的所有主体，则需要遍历所有主体的能力关系表。</p>\n","text":"访问控制技术1、主体、客体和访问授权主体：是一个主动的实体，它包括用户、用户组、终端、主机或一个应用，主体可以访问客体。 客体：是一个被动的实体，对客体的访问要受控，它可以是一个字节、字段、记录、程序、文件，或者是一个处理器、存贮器、网络接点等。 授权访问：指主体访问客体的允许，...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"访问控制","slug":"访问控制","count":1,"path":"api/tags/访问控制.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">访问控制技术</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E4%B8%BB%E4%BD%93%E3%80%81%E5%AE%A2%E4%BD%93%E5%92%8C%E8%AE%BF%E9%97%AE%E6%8E%88%E6%9D%83\"><span class=\"toc-text\">1、主体、客体和访问授权</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">2、访问控制策略</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">3、访问控制机制</span></a></li></ol></li></ol>","author":{"name":"kiku","slug":"blog-author","avatar":"https://samedi.gitee.io/favicon.png","link":"/","description":"网络运维,linux运维,web渗透","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Nginx学习","uid":"5681e035a73502206ebf637d9b24cd19","slug":"Nginx学习","date":"2022-11-11T07:41:55.000Z","updated":"2022-12-05T08:07:34.013Z","comments":true,"path":"api/articles/Nginx学习.json","keywords":null,"cover":"https://images.pexels.com/photos/10610169/pexels-photo-10610169.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2","text":"Nginx快速入门——狂神狂神的笔记： Nginx快速入门-KuangStudy-文章 Kali中的Linux其中nginx的日志文件在/var/log/nginx /var/lib/nginx里面是一些库文件 配置文件在/etc/nginx 启动nginx直接使用命令/etc/...","link":"","photos":[],"count_time":{"symbolsCount":196,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Nginx","slug":"Nginx","count":1,"path":"api/tags/Nginx.json"}],"author":{"name":"kiku","slug":"blog-author","avatar":"https://samedi.gitee.io/favicon.png","link":"/","description":"网络运维,linux运维,web渗透","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"加密与安全","uid":"59350d812f080a56659be6ee1dae0a2a","slug":"加密与安全","date":"2022-10-24T07:35:31.000Z","updated":"2022-10-27T01:43:20.270Z","comments":true,"path":"api/articles/加密与安全.json","keywords":null,"cover":"https://pic1.zhimg.com/50/v2-70f55a0cc8ae4187a3072c1a8234cd67_hd.jpg","text":"加密与安全编码算法ASCII码就是一种编码，字母A的编码是16进制的0x41，字母B是0x42，以此类推： 字母 ASCII编码 A 0x41 B 0x42 C 0x43 D 0x44 … … 因为ASCII编码最多只能有127个字符，要相对更多的文字进行编码，就需要用Unico...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[],"tags":[{"name":"加密","slug":"加密","count":1,"path":"api/tags/加密.json"}],"author":{"name":"kiku","slug":"blog-author","avatar":"https://samedi.gitee.io/favicon.png","link":"/","description":"网络运维,linux运维,web渗透","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}